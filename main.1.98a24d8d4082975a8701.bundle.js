(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{133:function(e,n,t){t(134),t(344),e.exports=t(341)},337:function(e,n,t){var a={"./00_title.md":338,"./05_me.md":339,"./10_fig.md":340};function r(e){var n=l(e);return t(n)}function l(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=l,e.exports=r,r.id=337},338:function(e,n,t){"use strict";t.r(n),t.d(n,"slides",function(){return u}),t.d(n,"fusumaProps",function(){return i}),t.d(n,"default",function(){return p});var a=t(3),r=t.n(a),l=t(1);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h1",null,"Apolloのlocal resolverと型定義"))}],i=[{}],m={slides:u},s="wrapper";function p(e){var n=e.components,t=c(e,["components"]);return Object(l.a)(s,o({},m,t,{components:n,mdxType:"MDXLayout"}),Object(l.a)("h1",null,"Apolloのlocal resolverと型定義"))}p.isMDXComponent=!0},339:function(e,n,t){"use strict";t.r(n),t.d(n,"slides",function(){return u}),t.d(n,"fusumaProps",function(){return i}),t.d(n,"default",function(){return p});var a=t(3),r=t.n(a),l=t(1);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"About me"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Yosuke Kurami(@Quramy)"),Object(l.a)("li",{parentName:"ul"},"Front-end Web developer")))}],i=[{}],m={slides:u},s="wrapper";function p(e){var n=e.components,t=c(e,["components"]);return Object(l.a)(s,o({},m,t,{components:n,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"About me"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Yosuke Kurami(@Quramy)"),Object(l.a)("li",{parentName:"ul"},"Front-end Web developer")))}p.isMDXComponent=!0},340:function(e,n,t){"use strict";t.r(n),t.d(n,"slides",function(){return u}),t.d(n,"fusumaProps",function(){return i}),t.d(n,"default",function(){return p});var a=t(3),r=t.n(a),l=t(1);function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var u=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"apollo-link-state 知っていますか？"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"いわゆるstate managerの一種"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"background"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"apolloを使う場合、server sideとの通信結果はapolloのcacheに保存されている",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"GraphQLの構造上、cacheのデータは最初から正規化された状態"),Object(l.a)("li",{parentName:"ul"},"要するに、redux + middleware + normalize な環境"))),Object(l.a)("li",{parentName:"ul"},"とはいえ、クライアントに閉じたstateをどこで管理するか？問題は残っていた",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"そのためにreduxとかいれるのも...? 🤔 な感じ")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,Object(l.a)("strong",{parentName:"h2"},"いっそclient stateもapolloのcacheで管理させたら良いのでは？")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"ということでapollo-link-stateが爆誕"),Object(l.a)("li",{parentName:"ul"},"apollo-client v2.5よりclient本体に組み込まれた")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"利用イメージ"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"storeからの値取り出し(Query)"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-javascript"}),"import React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport Todo from './Todo';\n\nconst GET_TODOS = gql`\n  {\n    todos @client {\n      id\n      completed\n      text\n    }\n    visibilityFilter @client\n  }\n`;\n\nconst TodoList = () => (\n  <Query query={GET_TODOS}>\n    {({ data: { todos, visibilityFilter } }) => (\n      <ul>\n        {getVisibleTodos(todos, visibilityFilter).map(todo => (\n          <Todo key={todo.id} {...todo} />\n        ))}\n      </ul>\n    )}\n  </Query>\n);\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"storeへの値書き込み(Command)"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-javascript"}),"import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst TOGGLE_TODO = gql`\n  mutation ToggleTodo($id: Int!) {\n    toggleTodo(id: $id) @client\n  }\n`;\n\nconst Todo = ({ id, completed, text }) => (\n  <Mutation mutation={TOGGLE_TODO} variables={{ id }}>\n    {toggleTodo => (\n      <li\n        onClick={toggleTodo}\n        style={{\n          textDecoration: completed ? 'line-through' : 'none',\n        }}\n      >\n        {text}\n      </li>\n    )}\n  </Mutation>\n);\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"store側の実装"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-javascript"}),"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  resolvers: {\n    Mutation: {\n      toggleTodo: (_root, variables, { cache, getCacheKey }) => {\n        const id = getCacheKey({ __typename: 'TodoItem', id: variables.id })\n        const fragment = gql`\n          fragment completeTodo on TodoItem {\n            completed\n          }\n        `;\n        const todo = cache.readFragment({ fragment, id });\n        const data = { ...todo, completed: !todo.completed };\n        cache.writeData({ id, data });\n        return null;\n      },\n    },\n  },\n});\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"ここまで"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"アプリケーションからはGraphQLでlocal stateへアクセス",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"読み込みは Query, 書き込みは Mutation"),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"@client")," directiveでlocal accessであることを指示"))),Object(l.a)("li",{parentName:"ul"},"store側はapolloのcacheを使う。自前でresolver実装する"),Object(l.a)("li",{parentName:"ul"},"reduxの対比イメージ:",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"mapStateToProps <-> Query"),Object(l.a)("li",{parentName:"ul"},"action creator <-> Mutation"),Object(l.a)("li",{parentName:"ul"},"reducer <-> Mutationの実装")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"最大のギモン"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,Object(l.a)("strong",{parentName:"h2"},"誰がlocal stateのschemaを提供するのか？ 🤔")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"TypeScriptでアプリケーションを書きたい"),Object(l.a)("li",{parentName:"ul"},"apollo-toolingのようなcodegen で型付けされていてほしい"),Object(l.a)("li",{parentName:"ul"},"そのためにはschema定義(json or SDL)が必要")),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import { QueryResult } from "./__generated__/Query";\n\nconst { data } = client.query<QueryResult>({ query: myQuery });\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"apollo client公式のサンプルでは、local stateの型付けには特に言及されていない"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,Object(l.a)("strong",{parentName:"h2"},"local resolverの実装からschemaが生成できればtool chainに乗れるのでは")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"そこで type-graphql"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://typegraphql.ml/"}),"https://typegraphql.ml/")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"type-graphql"),Object(l.a)("p",null,"Decorator使ってGrapQL resolverを実装しつつ、そこからschema生成できる子"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),"@ObjectType()\nclass Recipe {\n  @Field()\n  title: string;\n\n  @Field(type => [Rate])\n  ratings: Rate[];\n\n  @Field({ nullable: true })\n  averageRating?: number;\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"やってみた"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import gql from "graphql-tag";\nimport { Service } from "typedi";\nimport { InMemoryCache } from "apollo-cache-inmemory";\nimport { Resolvers } from "apollo-client";\nimport { Int, Arg, Ctx, ObjectType, Field, Resolver, Query, Mutation } from "type-graphql"; \n\n@ObjectType()\nclass UserForm {\n  @Field() firstName: string = "";\n  @Field() lastName: string = "";\n  @Field(() => Int) age: number = 0;\n  readonly __typename = "UserForm";\n}\n\n@Service()\n@Resolver(UserForm)\nexport class UserFormResolver {\n\n  private readonly userFormNodeId = "userForm";\n\n  constructor(\n    private readonly cache: InMemoryCache,\n  ) {\n    const userForm = new UserForm();\n    this.cache.writeData({ data: { userForm } });\n  }\n\n  @Query(() => UserForm, { name: "userForm" })\n  getUserForm() {\n    const ret = this.cache.readQuery<{ userForm: UserForm }>({\n      query: gql`\n        {\n          userForm {\n            firstName,\n            lastName,\n            age,\n          }\n        }\n      `,\n    });\n    return ret && ret.userForm;\n  }\n\n  @Mutation(returns => UserForm)\n  updateFirstName(@Arg("value") value: string) {\n    const userForm = this.getUserForm();\n    if (!userForm) return;\n    userForm.firstName = value;\n    this.cache.writeData({ data: { userForm } });\n    return userForm;\n  }\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"generate"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import "reflect-metadata";\nimport path from "path";\nimport { buildSchema } from "type-graphql";\nimport { UserFormResolver } from "../src/resolver";\n\nasync function main() {\n  const schema = await buildSchema({\n    resolvers: [UserFormResolver],\n    emitSchemaFile: {\n      path: path.resolve(__dirname, "../client_schema.graphql"),\n    },\n  });\n}\n\nmain();\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"generated SDL"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-graphql"}),"# -----------------------------------------------\n# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!\n# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!\n# -----------------------------------------------\n\ntype Mutation {\n  updateFirstName(value: String!): UserForm!\n}\n\ntype Query {\n  userForm: UserForm!\n}\n\ntype UserForm {\n  firstName: String!\n  lastName: String!\n  age: Int!\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{}),"$ apollo client:codegen --target=typescript\n")),Object(l.a)("p",null,"とかすると..."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"これが書けるようになる"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import "reflect-metadata";\n\nimport gql from "graphql-tag";\nimport { Container } from "typedi";\nimport { buildSchema, buildTypeDefsAndResolvers } from "type-graphql";\nimport { UserFormResolver } from "./resolver";\n\nimport { ApolloClient } from "apollo-client";\nimport { InMemoryCache } from "apollo-cache-inmemory";\nimport { UserForm } from "./__generated__/UserForm";\n\nconst UserFormQuery = gql`\n  query UserForm {\n    userForm @client {\n      firstName,\n      lastName,\n    }\n  }\n`;\n\nconst UpdateFirstNameMutation = gql`\n  mutation UpdateFirstName($value: String!) {\n    updateFirstName(value: $value) @client {\n    }\n  }\n`;\n\nasync function main() {\n\n  const cache = new InMemoryCache();\n\n  Container.set(InMemoryCache, cache);\n\n  const { resolvers, typeDefs } = await buildTypeDefsAndResolvers({\n    resolvers: [UserFormResolver],\n    container: Container,\n  });\n\n  const client = new ApolloClient({\n    cache,\n    typeDefs,\n    resolvers: resolvers as any,\n  });\n\n  const result1 = await client.query<UserForm>({ query: UserFormQuery });\n  console.log(result1.data.userForm);\n\n  await client.mutate({\n    mutation: UpdateFirstNameMutation,\n    variables: {\n      value: "Yosuke",\n    }\n  });\n\n  const result2 = await client.query<UserForm>({ query: UserFormQuery });\n  console.log(result2.data.userForm);\n}\n\nmain();\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"所感"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},"正直クッソ面倒くさい")," 😇"),Object(l.a)("li",{parentName:"ul"},"browser localのmemoryにアクセスするためだけにこの手順はねーわ..."),Object(l.a)("li",{parentName:"ul"},"これなら普通にreduxなりの別のstate managerの方が全然楽では...")))}],i=[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],m={slides:u},s="wrapper";function p(e){var n=e.components,t=o(e,["components"]);return Object(l.a)(s,c({},m,t,{components:n,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"apollo-link-state 知っていますか？"),Object(l.a)("hr",null),Object(l.a)("h2",null,"いわゆるstate managerの一種"),Object(l.a)("hr",null),Object(l.a)("h2",null,"background"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"apolloを使う場合、server sideとの通信結果はapolloのcacheに保存されている",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"GraphQLの構造上、cacheのデータは最初から正規化された状態"),Object(l.a)("li",{parentName:"ul"},"要するに、redux + middleware + normalize な環境"))),Object(l.a)("li",{parentName:"ul"},"とはいえ、クライアントに閉じたstateをどこで管理するか？問題は残っていた",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"そのためにreduxとかいれるのも...? 🤔 な感じ")))),Object(l.a)("hr",null),Object(l.a)("h2",null,Object(l.a)("strong",{parentName:"h2"},"いっそclient stateもapolloのcacheで管理させたら良いのでは？")),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"ということでapollo-link-stateが爆誕"),Object(l.a)("li",{parentName:"ul"},"apollo-client v2.5よりclient本体に組み込まれた")),Object(l.a)("hr",null),Object(l.a)("h2",null,"利用イメージ"),Object(l.a)("hr",null),Object(l.a)("h3",null,"storeからの値取り出し(Query)"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-javascript"}),"import React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport Todo from './Todo';\n\nconst GET_TODOS = gql`\n  {\n    todos @client {\n      id\n      completed\n      text\n    }\n    visibilityFilter @client\n  }\n`;\n\nconst TodoList = () => (\n  <Query query={GET_TODOS}>\n    {({ data: { todos, visibilityFilter } }) => (\n      <ul>\n        {getVisibleTodos(todos, visibilityFilter).map(todo => (\n          <Todo key={todo.id} {...todo} />\n        ))}\n      </ul>\n    )}\n  </Query>\n);\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,"storeへの値書き込み(Command)"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-javascript"}),"import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst TOGGLE_TODO = gql`\n  mutation ToggleTodo($id: Int!) {\n    toggleTodo(id: $id) @client\n  }\n`;\n\nconst Todo = ({ id, completed, text }) => (\n  <Mutation mutation={TOGGLE_TODO} variables={{ id }}>\n    {toggleTodo => (\n      <li\n        onClick={toggleTodo}\n        style={{\n          textDecoration: completed ? 'line-through' : 'none',\n        }}\n      >\n        {text}\n      </li>\n    )}\n  </Mutation>\n);\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,"store側の実装"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-javascript"}),"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  resolvers: {\n    Mutation: {\n      toggleTodo: (_root, variables, { cache, getCacheKey }) => {\n        const id = getCacheKey({ __typename: 'TodoItem', id: variables.id })\n        const fragment = gql`\n          fragment completeTodo on TodoItem {\n            completed\n          }\n        `;\n        const todo = cache.readFragment({ fragment, id });\n        const data = { ...todo, completed: !todo.completed };\n        cache.writeData({ id, data });\n        return null;\n      },\n    },\n  },\n});\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,"ここまで"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"アプリケーションからはGraphQLでlocal stateへアクセス",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"読み込みは Query, 書き込みは Mutation"),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"@client")," directiveでlocal accessであることを指示"))),Object(l.a)("li",{parentName:"ul"},"store側はapolloのcacheを使う。自前でresolver実装する"),Object(l.a)("li",{parentName:"ul"},"reduxの対比イメージ:",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"mapStateToProps <-> Query"),Object(l.a)("li",{parentName:"ul"},"action creator <-> Mutation"),Object(l.a)("li",{parentName:"ul"},"reducer <-> Mutationの実装")))),Object(l.a)("hr",null),Object(l.a)("h2",null,"最大のギモン"),Object(l.a)("hr",null),Object(l.a)("h2",null,Object(l.a)("strong",{parentName:"h2"},"誰がlocal stateのschemaを提供するのか？ 🤔")),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"TypeScriptでアプリケーションを書きたい"),Object(l.a)("li",{parentName:"ul"},"apollo-toolingのようなcodegen で型付けされていてほしい"),Object(l.a)("li",{parentName:"ul"},"そのためにはschema定義(json or SDL)が必要")),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import { QueryResult } from "./__generated__/Query";\n\nconst { data } = client.query<QueryResult>({ query: myQuery });\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"apollo client公式のサンプルでは、local stateの型付けには特に言及されていない"),Object(l.a)("hr",null),Object(l.a)("h2",null,Object(l.a)("strong",{parentName:"h2"},"local resolverの実装からschemaが生成できればtool chainに乗れるのでは")),Object(l.a)("hr",null),Object(l.a)("h2",null,"そこで type-graphql"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://typegraphql.ml/"}),"https://typegraphql.ml/")),Object(l.a)("hr",null),Object(l.a)("h3",null,"type-graphql"),Object(l.a)("p",null,"Decorator使ってGrapQL resolverを実装しつつ、そこからschema生成できる子"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),"@ObjectType()\nclass Recipe {\n  @Field()\n  title: string;\n\n  @Field(type => [Rate])\n  ratings: Rate[];\n\n  @Field({ nullable: true })\n  averageRating?: number;\n}\n")),Object(l.a)("hr",null),Object(l.a)("h2",null,"やってみた"),Object(l.a)("hr",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import gql from "graphql-tag";\nimport { Service } from "typedi";\nimport { InMemoryCache } from "apollo-cache-inmemory";\nimport { Resolvers } from "apollo-client";\nimport { Int, Arg, Ctx, ObjectType, Field, Resolver, Query, Mutation } from "type-graphql"; \n\n@ObjectType()\nclass UserForm {\n  @Field() firstName: string = "";\n  @Field() lastName: string = "";\n  @Field(() => Int) age: number = 0;\n  readonly __typename = "UserForm";\n}\n\n@Service()\n@Resolver(UserForm)\nexport class UserFormResolver {\n\n  private readonly userFormNodeId = "userForm";\n\n  constructor(\n    private readonly cache: InMemoryCache,\n  ) {\n    const userForm = new UserForm();\n    this.cache.writeData({ data: { userForm } });\n  }\n\n  @Query(() => UserForm, { name: "userForm" })\n  getUserForm() {\n    const ret = this.cache.readQuery<{ userForm: UserForm }>({\n      query: gql`\n        {\n          userForm {\n            firstName,\n            lastName,\n            age,\n          }\n        }\n      `,\n    });\n    return ret && ret.userForm;\n  }\n\n  @Mutation(returns => UserForm)\n  updateFirstName(@Arg("value") value: string) {\n    const userForm = this.getUserForm();\n    if (!userForm) return;\n    userForm.firstName = value;\n    this.cache.writeData({ data: { userForm } });\n    return userForm;\n  }\n}\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"generate"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import "reflect-metadata";\nimport path from "path";\nimport { buildSchema } from "type-graphql";\nimport { UserFormResolver } from "../src/resolver";\n\nasync function main() {\n  const schema = await buildSchema({\n    resolvers: [UserFormResolver],\n    emitSchemaFile: {\n      path: path.resolve(__dirname, "../client_schema.graphql"),\n    },\n  });\n}\n\nmain();\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,"generated SDL"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-graphql"}),"# -----------------------------------------------\n# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!\n# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!\n# -----------------------------------------------\n\ntype Mutation {\n  updateFirstName(value: String!): UserForm!\n}\n\ntype Query {\n  userForm: UserForm!\n}\n\ntype UserForm {\n  firstName: String!\n  lastName: String!\n  age: Int!\n}\n")),Object(l.a)("hr",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{}),"$ apollo client:codegen --target=typescript\n")),Object(l.a)("p",null,"とかすると..."),Object(l.a)("hr",null),Object(l.a)("h2",null,"これが書けるようになる"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-typescript"}),'import "reflect-metadata";\n\nimport gql from "graphql-tag";\nimport { Container } from "typedi";\nimport { buildSchema, buildTypeDefsAndResolvers } from "type-graphql";\nimport { UserFormResolver } from "./resolver";\n\nimport { ApolloClient } from "apollo-client";\nimport { InMemoryCache } from "apollo-cache-inmemory";\nimport { UserForm } from "./__generated__/UserForm";\n\nconst UserFormQuery = gql`\n  query UserForm {\n    userForm @client {\n      firstName,\n      lastName,\n    }\n  }\n`;\n\nconst UpdateFirstNameMutation = gql`\n  mutation UpdateFirstName($value: String!) {\n    updateFirstName(value: $value) @client {\n    }\n  }\n`;\n\nasync function main() {\n\n  const cache = new InMemoryCache();\n\n  Container.set(InMemoryCache, cache);\n\n  const { resolvers, typeDefs } = await buildTypeDefsAndResolvers({\n    resolvers: [UserFormResolver],\n    container: Container,\n  });\n\n  const client = new ApolloClient({\n    cache,\n    typeDefs,\n    resolvers: resolvers as any,\n  });\n\n  const result1 = await client.query<UserForm>({ query: UserFormQuery });\n  console.log(result1.data.userForm);\n\n  await client.mutate({\n    mutation: UpdateFirstNameMutation,\n    variables: {\n      value: "Yosuke",\n    }\n  });\n\n  const result2 = await client.query<UserForm>({ query: UserFormQuery });\n  console.log(result2.data.userForm);\n}\n\nmain();\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"所感"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},"正直クッソ面倒くさい")," 😇"),Object(l.a)("li",{parentName:"ul"},"browser localのmemoryにアクセスするためだけにこの手順はねーわ..."),Object(l.a)("li",{parentName:"ul"},"これなら普通にreduxなりの別のstate managerの方が全然楽では...")))}p.isMDXComponent=!0},342:function(e,n,t){var a=t(343);"string"==typeof a&&(a=[[e.i,a,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(51)(a,r);a.locals&&(e.exports=a.locals)},343:function(e,n,t){}},[[133,3,5]],[0]]);